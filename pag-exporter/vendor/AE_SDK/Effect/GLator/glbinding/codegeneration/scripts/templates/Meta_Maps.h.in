#pragma once

#include <string>

#include <unordered_map>
#include <vector>
#include <set>

#include <glbinding/gl/types.h>
#include <glbinding/gl/extension.h>


namespace glbinding
{

class Version;

extern const std::unordered_map<std::string, gl::GLbitfield> Meta_BitfieldsByString;
extern const std::unordered_map<gl::GLbitfield, std::string> Meta_StringsByBitfield;

extern const std::unordered_map<std::string, gl::GLboolean> Meta_BooleansByString;
extern const std::unordered_map<gl::GLboolean, std::string> Meta_StringsByBoolean;

extern const std::unordered_map<std::string, gl::GLenum> Meta_EnumsByString;
extern const std::unordered_map<gl::GLenum, std::string> Meta_StringsByEnum;

extern const std::unordered_map<std::string, gl::GLextension> Meta_ExtensionsByString;
extern const std::unordered_map<gl::GLextension, std::string> Meta_StringsByExtension;

extern const std::unordered_map<std::string, std::set<gl::GLextension>> Meta_ExtensionsByFunctionString;
extern const std::unordered_map<gl::GLextension, std::set<std::string>> Meta_FunctionStringsByExtension;

extern const std::unordered_map<gl::GLextension, Version> Meta_ReqVersionsByExtension;

%s

} // namespace glbinding
