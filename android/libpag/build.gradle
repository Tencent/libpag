apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = '4.1.0'
project.ext.artifactId = 'libpag'
project.group = 'com.tencent.tav'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    ndkVersion rootProject.ndkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static",
                        "-DPAG_USE_LIBAVC=OFF",
                        "-DPAG_USE_FFAVC=ON"
            }
        }

        ndk {
            if (project.hasProperty("arm64-only")) {
                abiFilters.add("arm64-v8a")
            } else {
                abiFilters.add("armeabi-v7a")
                abiFilters.add("arm64-v8a")
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ["libs"]
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            version rootProject.cmakeVersion
            path '../../CMakeLists.txt'
        }
    }
    namespace 'org.libpag'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation("androidx.exifinterface:exifinterface:1.3.3")
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

publishing {
    publications {
        mavenAar(MavenPublication) {
            // group id，发布后引用的依赖的 group id
            groupId 'com.tencent.tav'
            // 发布后引用的依赖的 artifact id
            artifactId 'libpag'
            println version
            // 发布的 arr 的文件和源码文件
            artifact("$buildDir/outputs/aar/libpag-release.aar")
            artifact androidSourcesJar
            pom {
                // 构件名称，可以自定义
                name = 'libpag'
                // 构件描述
                description = 'A real-time rendering library for PAG (Portable Animated Graphics) files that renders After Effects animations natively across multiple platforms.'
                // 构件主页
                url = 'https://github.com/Tencent/libpag'
                // 许可证名称和地址
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://github.com/Tencent/libpag/blob/main/LICENSE.txt'
                    }
                }
                // 开发者信息
                developers {
                    developer {
                        name = 'libpag'
                        email = 'libpag@tencent.com'
                    }
                }
                // 版本控制仓库地址
                scm {
                    url = 'https://github.com/Tencent/libpag'
                    connection = 'scm:git:github.com/Tencent/libpag.git'
                    developerConnection = 'scm:git:ssh://git@github.com/Tencent/libpag.git'
                }
            }
        }
    }
    repositories {
        maven {
            // 发布的位置，这里根据发布的版本区分了 SNAPSHOT 和最终版本两种情况
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications
}

project.afterEvaluate {
    mergeReleaseNativeLibs.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/merged_native_libs/release/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/merged_native_libs/release/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/merged_native_libs/release/out/lib/armeabi'
            include '*.so'
        }
    }
    stripReleaseDebugSymbols.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/stripped_native_libs/release/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/stripped_native_libs/release/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/stripped_native_libs/release/out/lib/armeabi'
            include '*.so'
        }
    }
    // 此处为了方便debug，保留debug版本armeabi的拷贝，方便源码接入时候的调试
    mergeDebugNativeLibs.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/merged_native_libs/debug/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/merged_native_libs/debug/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/merged_native_libs/debug/out/lib/armeabi'
            include '*.so'
        }
    }
    stripDebugDebugSymbols.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/out/lib/armeabi'
            include '*.so'
        }
    }
    publishing {
        repositories {
        }
        publications {
            aar(MavenPublication) {
                groupId project.group
                artifactId project.artifactId
                version project.version

                artifact bundleReleaseAar

                //The publication doesn't know about our dependencies, so we have to manually add them to the pom
                pom.withXml {
                    // for dependencies and exclusions
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.api.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)

                        // for exclusions
                        if (dp.excludeRules.size() > 0) {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            dp.excludeRules.each { ExcludeRule ex ->
                                def exclusion = exclusions.appendNode('exclusion')
                                exclusion.appendNode('groupId', ex.group)
                                exclusion.appendNode('artifactId', ex.module)
                            }
                        }
                    }
                }
            }
        }
    }
}

buildscript {
    repositories {
        maven { url "https://mirrors.tencent.com/nexus/repository/maven-public/" }
    }
    dependencies { classpath 'com.github.panpf.bintray-publish:bintray-publish:1.0.0' }
}
