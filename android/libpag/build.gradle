plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.19.0'
}


version = '4.1.0'
project.ext.artifactId = 'libpag'
project.group = 'com.tencent.tav'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    ndkVersion rootProject.ndkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static",
                        "-DPAG_USE_LIBAVC=OFF",
                        "-DPAG_USE_FFAVC=ON"
            }
        }

        ndk {
            if (project.hasProperty("arm64-only")) {
                abiFilters.add("arm64-v8a")
            } else {
                abiFilters.add("armeabi-v7a")
                abiFilters.add("arm64-v8a")
                abiFilters.add("x86_64")
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ["libs"]
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path '../../CMakeLists.txt'
            version = "3.22.1"
        }
    }
    namespace 'org.libpag'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation("androidx.exifinterface:exifinterface:1.3.3")
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.tencent.tav'
            artifactId = 'libpag'

            artifact("$buildDir/outputs/aar/libpag-release.aar")
            artifact androidSourcesJar
            pom {
                name = 'libpag'
                description = 'A real-time rendering library for PAG (Portable Animated Graphics) files that renders After Effects animations natively across multiple platforms.'
                url = 'https://github.com/Tencent/libpag'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://github.com/Tencent/libpag/blob/main/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'libpag'
                        name = 'libpag'
                        email = 'libpag@tencent.com'
                    }
                }
                scm {
                    url = 'https://github.com/Tencent/libpag'
                    connection = 'scm:git:github.com/Tencent/libpag.git'
                    developerConnection = 'scm:git:ssh://git@github.com/Tencent/libpag.git'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = 'staging'
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

signing {
    // Completely disable Gradle signing - JReleaser will handle all signing
    required { false }
}

jreleaser {
    gitRootSearch = true

    project{
        description = "A real-time rendering library for PAG (Portable Animated Graphics) files that renders After Effects animations natively across multiple platforms."
        copyright = "Copyright © 2025 Tencent. All rights reserved."
    }
    
    release {
        github {
            enabled = true
            skipTag = true
            skipRelease = true
        }
    }
    
    signing {
        active = 'ALWAYS'
        armored = true
    }
    
    deploy {
        maven {
            mavenCentral {
                    sonatype {
                    active = "ALWAYS"
                    url = "https://central.sonatype.com/api/v1/publisher"
                    stagingRepository(layout.buildDirectory.dir("staging-deploy").get().toString())
                    setAuthorization("Basic")
                    applyMavenCentralRules = false // Wait for fix: https://github.com/kordamp/pomchecker/issues/21
                    sign = true
                    checksums = true
                    sourceJar = true
                    javadocJar = true
                    retryDelay = 60
                }
            }
        }
    }
}

project.afterEvaluate {
    mergeReleaseNativeLibs.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib/armeabi'
            include '*.so'
        }
    }
    stripReleaseDebugSymbols.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/stripped_native_libs/release/stripReleaseDebugSymbols/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/stripped_native_libs/release/stripReleaseDebugSymbols/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/stripped_native_libs/release/stripReleaseDebugSymbols/out/lib/armeabi'
            include '*.so'
        }
    }
    // 此处为了方便debug，保留debug版本armeabi的拷贝，方便源码接入时候的调试
    mergeDebugNativeLibs.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/merged_native_libs/debug/mergeDebugNativeLibs/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/merged_native_libs/debug/mergeDebugNativeLibs/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/merged_native_libs/debug/mergeDebugNativeLibs/out/lib/armeabi'
            include '*.so'
        }
    }
    stripDebugDebugSymbols.doLast {
        delete {
            delete project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/stripDebugDebugSymbols/out/lib/armeabi'
        }
        copy {
            from project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/stripDebugDebugSymbols/out/lib/armeabi-v7a'
            into project.getBuildDir().path + '/intermediates/stripped_native_libs/debug/stripDebugDebugSymbols/out/lib/armeabi'
            include '*.so'
        }
    }
}